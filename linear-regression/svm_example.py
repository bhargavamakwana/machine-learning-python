# -*- coding: utf-8 -*-
"""ML_assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WEZKodhQjEyLYcRgCK1vNTw34mhvWPBW

# **Machine learning Homework 3**


Name: Kishore Ganapathi

Net ID: kg2841

#**Problem 2**
"""

!pip3 install torch torchvision torchaudio scipy==1.7.1

import torch
import scipy
import numpy as np
import scipy.io
import pandas as pd
from sklearn import svm
import collections
import matplotlib.pyplot as plt
from numpy.linalg import inv, pinv
from sklearn.utils import shuffle
# scipy version should be 1.7.1 or higher
print(scipy.__version__)

mat_dataset = scipy.io.loadmat('/content/dataset1.mat')

from google.colab import drive
drive.mount('/content/drive')

dX = mat_dataset['X']
dY = mat_dataset['Y']
dX, dY = shuffle(dX, dY)

dX_train, dX_test = dX[:50], dX[50:]
dY_train, dY_test = dY[:50], dY[50:]

print(dX_train.shape, dX_test.shape)
print(dY_train.shape, dY_test.shape)
# df = pd.DataFrame(dX)
# df['target'] = dY
# df0 = df[df.target==0]
# df1 = df[df.target==1]
# plt.scatter(df0[1], df0[3], color='green')
# plt.scatter(df1[1], df1[3], color='blue')

# |x_min, x_max = dX.flatten().min(), dX.flatten().max()
# y_min, y_max = dX.flatten().min(), dX.flatten().max()

C = 1.0  # SVM regularization parameter
# svc = svm.SVC(kernel='linear', C=C).fit(dX, dY)
h = .02
rbf_svc = svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(dX_train, dY_train.ravel())
poly_svc = svm.SVC(kernel='poly', degree=3, C=C).fit(dX_train, dY_train.ravel())
lin_svc = svm.LinearSVC(C=C).fit(dX_train, dY_train.ravel())


loss = collections.defaultdict(list)
for C in range(1, 10):
  rbf_svc = svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(dX_train, dY_train.ravel())
  poly_svc = svm.SVC(kernel='poly', degree=3, C=C).fit(dX_train, dY_train.ravel())
  lin_svc = svm.LinearSVC(C=C).fit(dX_train, dY_train.ravel())
  loss['linear'].append(1 - lin_svc.score(dX_test, dY_test))
  loss['poly_svc'].append(1 - poly_svc.score(dX_test, dY_test))
  loss['rbf_svc'].append(1-rbf_svc.score(dX_test, dY_test))

plt.plot(np.arange(1,10), loss['linear'], color='r')
plt.plot(np.arange(1,10), loss['rbf_svc'], color='b')
plt.plot(np.arange(1,10), loss['poly_svc'], color='g') 
plt.show()

gamma_loss = []
for gamma in np.arange(0.2,100, 0.2):
  rbf_svc = svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(dX_train, dY_train.ravel())
  gamma_loss.append(1 - rbf_svc.score(dX_test, dY_test))

plt.plot(np.arange(0.2, 100, 0.2), gamma_loss)

dloss = []
for d in range(1, 6):

  poly_svc = svm.SVC(kernel='poly', degree=d, C=C).fit(dX_train, dY_train.ravel())
  dloss.append(1 - poly_svc.score(dX_test, dY_test))
plt.plot(np.arange(1, 6), dloss)